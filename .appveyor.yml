version: 1.0.{build}

branches:
  only:
    - master

environment:
  global:
    APPVEYOR_SAVE_CACHE_ON_ERROR: true
    APPVEYOR_CACHE_ENTRY_ZIP_ARGS: -t7z -m0=lzma -mx=4
    APPVEYOR_RDP_PASSWORD: PL4YMUM3!
  matrix:
    - ARCH: x64
      COMPILER: GCC

    - ARCH: arm64
      COMPILER: GCC

    - ARCH: x64
      COMPILER: MinGW
      QTDIR: C:\Qt\5.15\mingw81_64

    - ARCH: x64
      COMPILER: VS2019
      QTDIR: C:\Qt\5.15\msvc2019_64

    - ARCH: x64
      COMPILER: Clang

image:
  # AppVeyor builds are ordered by the image list:
  - Visual Studio 2019
  - macos-bigsur
  - Ubuntu1804
  - Ubuntu2004
  - Previous Ubuntu2004
  - Previous Visual Studio 2019

matrix:
  exclude:
    # Exclude invalid options
    - image: Previous Visual Studio 2019
      COMPILER: Clang
    - image: Previous Visual Studio 2019
      COMPILER: GCC
    - image: Previous Visual Studio 2019
      COMPILER: MinGW
    - image: Visual Studio 2019
      COMPILER: Clang
    - image: Visual Studio 2019
      COMPILER: GCC
    - image: Visual Studio 2019
      COMPILER: VS2019
    - image: Ubuntu1804
      COMPILER: MinGW
    - image: Ubuntu1804
      COMPILER: VS2019
    - image: Ubuntu2004
      COMPILER: MinGW
    - image: Ubuntu2004
      COMPILER: VS2019
    - image: Previous Ubuntu2004
      COMPILER: MinGW
    - image: Previous Ubuntu2004
      COMPILER: VS2019
    - image: macos-bigsur
      COMPILER: GCC
    - image: macos-bigsur
      COMPILER: MinGW
    - image: macos-bigsur
      COMPILER: VS2019
    # Following builds are disabled to prevent build timeouts
    - image: Ubuntu1804
      COMPILER: Clang
    - image: Ubuntu2004
      COMPILER: Clang
    - image: Previous Ubuntu2004
      COMPILER: Clang
    - image: Ubuntu2004
      ARCH: arm64 
    - image: Previous Ubuntu2004
      ARCH: arm64
    # x64 .deb is either Ubuntu or Debian stable
    - image: Ubuntu2004
      ARCH: x64
    # Following builds are not supported by AppImage
    - image: Ubuntu1804
      ARCH: arm64

for:
  # Ubuntu (AppImage)
  -
    matrix:
      only:
        - image: Ubuntu1804

    clone_folder: ~/mmapper

    init:
      - sh: echo _NPROCESSORS_ONLN=$(getconf _NPROCESSORS_ONLN)

    install:
      - ps: $env:package_version = ("$(git describe --tags --always --long)").trim()
      - ps: Update-AppveyorBuild -Version "$env:package_version-$env:APPVEYOR_BUILD_NUMBER"

    build_script:
      # Build MMapper within a Docker container using the current working path as a volume
      - sh: sudo docker run --rm -v "$(pwd)":/root/mmapper --cap-add SYS_ADMIN --cap-add MKNOD --device /dev/fuse:mrw --security-opt apparmor:unconfined ubuntu:18.04 bash -c 'apt update -qq && apt install -y wget software-properties-common && wget https://apt.kitware.com/kitware-archive.sh && sh kitware-archive.sh && add-apt-repository ppa:beineri/opt-qt-5.15.2-bionic -y && apt install -y qt515base libgl1-mesa-dev build-essential git zlib1g-dev libssl-dev wget zsync fuse cmake libminiupnpc-dev && source /opt/qt*/bin/qt*-env.sh && cd /root/mmapper && mkdir -p build && cd build && cmake .. -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/usr && make -j$(getconf _NPROCESSORS_ONLN) DESTDIR=appdir install && QT_QPA_PLATFORM=offscreen ctest -V --no-compress-output -T test && export VERSION=$(grep -i "SET(CPACK_PACKAGE_VERSION " CPackConfig.cmake | cut -d\" -f 2) && wget https://github.com/probonopd/linuxdeployqt/releases/download/continuous/linuxdeployqt-continuous-x86_64.AppImage && chmod a+x linuxdeployqt-continuous-x86_64.AppImage && ./linuxdeployqt-continuous-x86_64.AppImage appdir/usr/share/applications/org.mume.MMapper.desktop -updateinformation="gh-releases-zsync|MUME|MMapper|latest|MMapper-*-x86_64.AppImage.zsync" -appimage'
      - sh: sudo mv build/*.AppImage* .
      - sh: export FILE=$(find . -type f -name MMapper*.AppImage | sed 's#./##')
      - sh: sha256sum $FILE > $FILE.sha256

    test_script:
      # Transform test results from ctest to junit format
      - ps: $XSLInputElement = New-Object System.Xml.Xsl.XslCompiledTransform
      - ps: $XSLInputElement.Load("https://raw.githubusercontent.com/rpavlik/jenkins-ctest-plugin/master/ctest-to-junit.xsl")
      - ps: $XSLInputElement.Transform((Resolve-Path .\build\Testing\*\Test.xml), (Join-Path (Resolve-Path .) "ctest-to-junit-results.xml"))
      - ps: $wc = New-Object 'System.Net.WebClient'
      - ps: $wc.UploadFile("https://ci.appveyor.com/api/testresults/junit/$($env:APPVEYOR_JOB_ID)", (Resolve-Path .\ctest-to-junit-results.xml))

    artifacts:
      - path: MMapper-*.AppImage
        name: MMapper AppImage Package

      - path: MMapper-*.AppImage.sha256
        name: MMapper Checksums

      - path: MMapper-*.AppImage.zsync
        name: MMapper AppImage Updateable

  # Ubuntu
  -
    matrix:
      only:
        - image: Ubuntu2004

    clone_folder: ~/mmapper

    init:
      - sh: echo _NPROCESSORS_ONLN=$(getconf _NPROCESSORS_ONLN)
      - sh: if [[ $ARCH == x64 ]]; then export TARGET_ARCHITECTURE=amd64 ; fi
      - sh: if [[ $ARCH == arm64 ]]; then export TARGET_ARCHITECTURE=arm64 ; fi
      - sh: echo TARGET_ARCHITECTURE=$TARGET_ARCHITECTURE

    install:
      - ps: $env:package_version = ("$(git describe --tags --always --long)").trim()
      - ps: Update-AppveyorBuild -Version "$env:package_version-$env:APPVEYOR_BUILD_NUMBER"
      - sh: sudo apt update -qq
      - sh: sudo apt install -y build-essential git qt5-qmake libqt5opengl5-dev zlib1g-dev libssl-dev cmake ninja-build libminiupnpc-dev

    build_script:
      - sh: mkdir build
      - sh: cd build
      - sh: cmake .. -G "Ninja" -DCMAKE_BUILD_TYPE=RelWithDebInfo -DTARGET_ARCHITECTURE=$TARGET_ARCHITECTURE
      - sh: cmake --build . -j$(getconf _NPROCESSORS_ONLN)
      - sh: cpack
      - sh: mv *.deb* ../

    test_script:
      - sh: QT_QPA_PLATFORM=offscreen ctest -V --no-compress-output -T test
      # Transform test results from ctest to junit format
      - ps: $XSLInputElement = New-Object System.Xml.Xsl.XslCompiledTransform
      - ps: $XSLInputElement.Load("https://raw.githubusercontent.com/rpavlik/jenkins-ctest-plugin/master/ctest-to-junit.xsl")
      - ps: $XSLInputElement.Transform((Resolve-Path .\Testing\*\Test.xml), (Join-Path (Resolve-Path .) "ctest-to-junit-results.xml"))
      - ps: $wc = New-Object 'System.Net.WebClient'
      - ps: $wc.UploadFile("https://ci.appveyor.com/api/testresults/junit/$($env:APPVEYOR_JOB_ID)", (Resolve-Path .\ctest-to-junit-results.xml))

    artifacts:
      - path: mmapper-*-Linux-*.deb
        name: MMapper Debian Package

      - path: mmapper-*-Linux-*.*.sha256
        name: MMapper Checksums

  # Ubuntu (Debian)
  -
    matrix:
      only:
        - image: Previous Ubuntu2004

    clone_folder: ~/mmapper

    services:
      - docker

    init:
      - sh: echo _NPROCESSORS_ONLN=$(getconf _NPROCESSORS_ONLN)
      - sh: if [[ $ARCH == x64 ]]; then export DOCKER_IMAGE=multiarch/debian-debootstrap:amd64-bullseye ; fi
      - sh: if [[ $ARCH == x64 ]]; then export TARGET_ARCHITECTURE=amd64 ; fi
      - sh: if [[ $ARCH == arm64 ]]; then export DOCKER_IMAGE=multiarch/debian-debootstrap:arm64-bullseye ; fi
      - sh: if [[ $ARCH == arm64 ]]; then export TARGET_ARCHITECTURE=arm64 ; fi
      - sh: echo TARGET_ARCHITECTURE=$TARGET_ARCHITECTURE
      - sh: echo DOCKER_IMAGE=$DOCKER_IMAGE

    install:
      - ps: $env:package_version = ("$(git describe --tags --always --long)").trim()
      - ps: Update-AppveyorBuild -Version "$env:package_version-$env:APPVEYOR_BUILD_NUMBER"
      # Enable an execution of different multi-architecture containers by QEMU
      # https://hub.docker.com/r/multiarch/qemu-user-static/
      - sh: docker run --rm --privileged multiarch/qemu-user-static:register --reset

    build_script:
      # Build MMapper within a Docker container using the current working path as a volume
      - sh: docker run --rm -v "$(pwd)":/root/mmapper $DOCKER_IMAGE bash -c "apt update -qq && apt install -y build-essential git qt5-qmake libqt5opengl5-dev zlib1g-dev libssl-dev cmake ninja-build libminiupnpc-dev && cd /root/mmapper && mkdir -p build && cd build && cmake .. -G \"Ninja\" -DTARGET_ARCHITECTURE=$TARGET_ARCHITECTURE && cmake --build . && QT_QPA_PLATFORM=offscreen ctest -V --no-compress-output -T test && cpack"
      - sh: sudo mv build/*.deb* .

    test_script:
      # Transform test results from ctest to junit format
      - ps: $XSLInputElement = New-Object System.Xml.Xsl.XslCompiledTransform
      - ps: $XSLInputElement.Load("https://raw.githubusercontent.com/rpavlik/jenkins-ctest-plugin/master/ctest-to-junit.xsl")
      - ps: $XSLInputElement.Transform((Resolve-Path .\build\Testing\*\Test.xml), (Join-Path (Resolve-Path .) "ctest-to-junit-results.xml"))
      - ps: $wc = New-Object 'System.Net.WebClient'
      - ps: $wc.UploadFile("https://ci.appveyor.com/api/testresults/junit/$($env:APPVEYOR_JOB_ID)", (Resolve-Path .\ctest-to-junit-results.xml))

    artifacts:
      - path: mmapper-*-Linux-*.deb
        name: MMapper Debian Package

      - path: mmapper-*-Linux-*.*.sha256
        name: MMapper Checksums

  # Windows (MSVC)
  -
    matrix:
      only:
        - image: Previous Visual Studio 2019

    clone_folder: c:\Build\MMapper

    init:
      - cmd: if %COMPILER%==VS2019 if %ARCH%==x64 call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Auxiliary\Build\vcvars64.bat"
      - cmd: if %COMPILER%==VS2019 set CMAKE_GENERATOR="NMake Makefiles"
      - cmd: if %ARCH%==x64 set OPENSSLDIR=C:\OpenSSL-v111-Win64
      - cmd: git config --global core.autocrlf input
      - cmd: echo NUMBER_OF_PROCESSORS=%NUMBER_OF_PROCESSORS%
      - cmd: echo PROCESSOR_IDENTIFIER=%PROCESSOR_IDENTIFIER%
      - cmd: echo QTDIR=%QTDIR%
      - cmd: echo CMAKE_GENERATOR=%CMAKE_GENERATOR%
      # Rename the OpenSSL 1.02 directory so CMake can't find it
      - cmd: if exist "C:\OpenSSL-Win32" move C:\OpenSSL-Win32 C:\OpenSSL-v102-Win32
      - cmd: if exist "C:\OpenSSL-Win64" move C:\OpenSSL-Win64 C:\OpenSSL-v102-Win64

    install:
      - ps: $env:package_version = ("$(git describe --tags --always --long)").trim()
      - ps: Update-AppveyorBuild -Version "$env:package_version-$env:APPVEYOR_BUILD_NUMBER"

    before_build:
      - cmd: set PATH=%QTDIR%\bin;%PATH%;C:\Qt\Tools\QtCreator\bin
      - cmd: echo PATH=%PATH%

    build_script:
      - cmd: cd c:\Build\MMapper
      - cmd: md winbuild
      - cmd: cd winbuild
      - cmd: cmake .. -DCMAKE_BUILD_TYPE=RelWithDebInfo -G %CMAKE_GENERATOR% "-DCMAKE_PREFIX_PATH=%QTDIR%" "-DOPENSSL_ROOT_DIR=%OPENSSLDIR%"
      - cmd: cmake --build . -j %NUMBER_OF_PROCESSORS%
      - cmd: cpack
      - ps: move *.exe* ../

    test_script:
      - cmd: ctest -V --no-compress-output -T Test
      # Transform test results from ctest to junit format
      - ps: $XSLInputElement = New-Object System.Xml.Xsl.XslCompiledTransform
      - ps: $XSLInputElement.Load("https://raw.githubusercontent.com/rpavlik/jenkins-ctest-plugin/master/ctest-to-junit.xsl")
      - ps: $XSLInputElement.Transform((Resolve-Path .\Testing\*\Test.xml), (Join-Path (Resolve-Path .) "ctest-to-junit-results.xml"))
      - ps: $wc = New-Object 'System.Net.WebClient'
      - ps: $wc.UploadFile("https://ci.appveyor.com/api/testresults/junit/$($env:APPVEYOR_JOB_ID)", (Resolve-Path .\ctest-to-junit-results.xml))

    artifacts:
      - path: mmapper-*-Windows-*.exe
        name: MMapper Installer

      - path: mmapper-*-Windows-*.*.sha256
        name: MMapper Checksums

  # Windows (MinGW)
  -
    matrix:
      only:
        - image: Visual Studio 2019

    clone_folder: c:\Build\MMapper

    init:
      - cmd: if %COMPILER%==MinGW set CMAKE_GENERATOR="MSYS Makefiles"
      - cmd: git config --global core.autocrlf input
      - cmd: echo NUMBER_OF_PROCESSORS=%NUMBER_OF_PROCESSORS%
      - cmd: echo PROCESSOR_IDENTIFIER=%PROCESSOR_IDENTIFIER%
      - cmd: echo QTDIR=%QTDIR%
      - cmd: echo CMAKE_GENERATOR=%CMAKE_GENERATOR%
      # Rename the OpenSSL 1.02 directory so CMake can't find it
      - cmd: if exist "C:\OpenSSL-Win32" move C:\OpenSSL-Win32 C:\OpenSSL-v102-Win32
      - cmd: if exist "C:\OpenSSL-Win64" move C:\OpenSSL-Win64 C:\OpenSSL-v102-Win64

    install:
      - ps: $env:package_version = ("$(git describe --tags --always --long)").trim()
      - ps: Update-AppveyorBuild -Version "$env:package_version-$env:APPVEYOR_BUILD_NUMBER"
      # Install MingW
      - cmd: if %COMPILER%==MinGW set "PATH=C:/msys64/usr/bin;%PATH%"
      - cmd: if %COMPILER%==MinGW pacman -Su --noconfirm --noprogressbar
      - cmd: if %COMPILER%==MinGW if %ARCH%==x64 pacman -Sy --noconfirm --noprogressbar --needed mingw-w64-x86_64-toolchain mingw-w64-x86_64-miniupnpc

        before_build:
      - cmd: if %COMPILER%==MinGW if %ARCH%==x64 set "PATH=C:/msys64/mingw64/bin;%PATH%"
      - cmd: set PATH=%QTDIR%\bin;%PATH%;C:\Qt\Tools\QtCreator\bin
      - cmd: if %COMPILER%==MinGW set PATH=%PATH:C:\Program Files\Git\usr\bin;=%
      - cmd: echo PATH=%PATH%

    build_script:
      - cmd: cd c:\Build\MMapper
      - cmd: md winbuild
      - cmd: cd winbuild
      - cmd: cmake .. -DCMAKE_BUILD_TYPE=RelWithDebInfo -G %CMAKE_GENERATOR% "-DCMAKE_PREFIX_PATH=%QTDIR%"
      - cmd: cmake --build . -j %NUMBER_OF_PROCESSORS%
      - cmd: cpack
      - ps: move *.exe* ../

    test_script:
      - cmd: ctest -V --no-compress-output -T test
      # Transform test results from ctest to junit format
      - ps: $XSLInputElement = New-Object System.Xml.Xsl.XslCompiledTransform
      - ps: $XSLInputElement.Load("https://raw.githubusercontent.com/rpavlik/jenkins-ctest-plugin/master/ctest-to-junit.xsl")
      - ps: $XSLInputElement.Transform((Resolve-Path .\Testing\*\Test.xml), (Join-Path (Resolve-Path .) "ctest-to-junit-results.xml"))
      - ps: $wc = New-Object 'System.Net.WebClient'
      - ps: $wc.UploadFile("https://ci.appveyor.com/api/testresults/junit/$($env:APPVEYOR_JOB_ID)", (Resolve-Path .\ctest-to-junit-results.xml))

    artifacts:
      - path: mmapper-*-Windows-*.exe
        name: MMapper Installer

      - path: mmapper-*-Windows-*.*.sha256
        name: MMapper Checksums

    on_failure:
      # Change false to true to block build and investigate build failures
      - ps: $blockRdp = $false; iex ((new-object net.webclient).DownloadString('https://raw.githubusercontent.com/appveyor/ci/master/scripts/enable-rdp.ps1'))

  # Mac
  -
    matrix:
      only:
        - image: macos-bigsur

    clone_folder: ~/mmapper

    init:
      - sh: echo _NPROCESSORS_ONLN=$(getconf _NPROCESSORS_ONLN)

    install:
      - ps: $env:package_version = ("$(git describe --tags --always --long)").trim()
      - ps: Update-AppveyorBuild -Version "$env:package_version-$env:APPVEYOR_BUILD_NUMBER"
      - brew install openssl@1.1 qt5 miniupnpc
      - brew link qt5 --force
      - export PATH=/usr/local/opt/qt5/bin:$PATH

    build_script:
      - mkdir build
      - cd build
      - cmake .. -DCMAKE_PREFIX_PATH=/usr/local/opt/qt5/bin -DOPENSSL_ROOT_DIR=/usr/local/opt/openssl\@1.1 -DCPACK_PACKAGE_DIRECTORY=~/package
      - make -j$(getconf _NPROCESSORS_ONLN)
      - cpack
      - mv ~/package/*.dmg* ../

    test_script:
      - ctest -V --no-compress-output -T test
      # Transform test results from ctest to junit format
      - ps: $XSLInputElement = New-Object System.Xml.Xsl.XslCompiledTransform
      - ps: $XSLInputElement.Load("https://raw.githubusercontent.com/rpavlik/jenkins-ctest-plugin/master/ctest-to-junit.xsl")
      - ps: $XSLInputElement.Transform((Resolve-Path .\Testing\*\Test.xml), (Join-Path (Resolve-Path .) "ctest-to-junit-results.xml"))
      - ps: $wc = New-Object 'System.Net.WebClient'
      - ps: $wc.UploadFile("https://ci.appveyor.com/api/testresults/junit/$($env:APPVEYOR_JOB_ID)", (Resolve-Path .\ctest-to-junit-results.xml))

    artifacts:
      - path: mmapper-*-Mac-*.dmg
        name: MMapper Mac Package

      - path: mmapper-*-Mac-*.*.sha256
        name: MMapper Checksums
