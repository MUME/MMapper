version: 1.0.{build}

branches:
  only:
    - master

environment:
  matrix:
    - ARCH: x86
      COMPILER: GCC

    - ARCH: x64
      COMPILER: GCC

    - ARCH: arm
      COMPILER: GCC

    - ARCH: arm64
      COMPILER: GCC

    - ARCH: x86
      COMPILER: MinGW
      QTDIR: C:\Qt\5.13\mingw73_32
      MINGWDIR: C:\mingw-w64\i686-8.1.0-posix-seh-rt_v6-rev0\mingw32
      OPENSSLDIR: C:\OpenSSL-v111-Win32

    - ARCH: x64
      COMPILER: MinGW
      QTDIR: C:\Qt\5.13\mingw73_64
      MINGWDIR: C:\mingw-w64\x86_64-8.1.0-posix-seh-rt_v6-rev0\mingw64
      OPENSSLDIR: C:\OpenSSL-v111-Win64

    - ARCH: x86
      COMPILER: VS2017
      QTDIR: C:\Qt\5.13\msvc2017
      OPENSSLDIR: C:\OpenSSL-v111-Win32

    - ARCH: x64
      COMPILER: VS2017
      QTDIR: C:\Qt\5.13\msvc2017_64
      OPENSSLDIR: C:\OpenSSL-v111-Win64

    - ARCH: x64
      COMPILER: Clang

image:
  - Visual Studio 2017
  - Ubuntu1804
  - macos-mojave

matrix:
  exclude:
    # Exclude invalid options
    - image: Visual Studio 2017
      COMPILER: GCC
    - image: Visual Studio 2017
      COMPILER: Clang
    - image: Ubuntu1804
      COMPILER: MinGW
    - image: Ubuntu1804
      COMPILER: VS2017
    - image: Ubuntu1804
      COMPILER: Clang
    - image: macos-mojave
      COMPILER: GCC
    - image: macos-mojave
      COMPILER: MinGW
    - image: macos-mojave
      COMPILER: VS2017
    # Following builds are disabled to prevent build timeout
    - image: Ubuntu1804
      ARCH: arm
    - image: Ubuntu1804
      ARCH: arm64

for:
  # Ubuntu
  -
    matrix:
      only:
        - image: Ubuntu1804

    clone_folder: ~/mmapper

    services:
      - docker

    init:
      - sh: echo _NPROCESSORS_ONLN=$(getconf _NPROCESSORS_ONLN)
      - sh: if [[ $ARCH == x86 ]]; then export DOCKER_IMAGE=i386/ubuntu:18.04 ; fi
      - sh: if [[ $ARCH == x86 ]]; then export TARGET_ARCHITECTURE=i386 ; fi
      - sh: if [[ $ARCH == x64 ]]; then export DOCKER_IMAGE=amd64/ubuntu:18.04 ; fi
      - sh: if [[ $ARCH == x64 ]]; then export TARGET_ARCHITECTURE=amd64 ; fi
      - sh: if [[ $ARCH == arm ]]; then export DOCKER_IMAGE=multiarch/debian-debootstrap:armhf-buster ; fi
      - sh: if [[ $ARCH == arm ]]; then export TARGET_ARCHITECTURE=armhf ; fi
      - sh: if [[ $ARCH == arm64 ]]; then export DOCKER_IMAGE=multiarch/debian-debootstrap:arm64-buster ; fi
      - sh: if [[ $ARCH == arm64 ]]; then export TARGET_ARCHITECTURE=arm64 ; fi
      - sh: echo TARGET_ARCHITECTURE=$TARGET_ARCHITECTURE
      - sh: echo DOCKER_IMAGE=$DOCKER_IMAGE

    install:
      - ps: $env:package_version = ("$(git describe --tags --always --long)").trim()
      - ps: Update-AppveyorBuild -Version "$env:package_version-$env:APPVEYOR_BUILD_NUMBER"
      # Enable an execution of different multi-architecture containers by QEMU
      # https://hub.docker.com/r/multiarch/qemu-user-static/
      - sh: docker run --rm --privileged multiarch/qemu-user-static:register --reset

    build_script:
      # Build MMapper within a Docker container using the current working path as a volume
      - sh: docker run --rm -v "$(pwd)":/root/mmapper $DOCKER_IMAGE bash -c "apt update && apt upgrade -y && apt install -y build-essential git qt5-qmake libqt5opengl5-dev zlib1g-dev libssl-dev cmake libminiupnpc-dev && cd /root/mmapper && mkdir build && cd build && cmake .. -DTARGET_ARCHITECTURE=$TARGET_ARCHITECTURE -DUSE_COTIRE=true && make -j$(getconf _NPROCESSORS_ONLN) && QT_QPA_PLATFORM=offscreen ctest -V && cpack"

    artifacts:
      - path: build\mmapper-*-Linux-*.deb
        name: MMapper Debian Package

      - path: build\mmapper-*-Linux-*.*.sha256
        name: MMapper Checksums

  # Windows
  -
    matrix:
      only:
        - image: Visual Studio 2017

    clone_folder: c:\Build\MMapper

    cache: C:\mingw-w64\i686-8.1.0-posix-seh-rt_v6-rev0\mingw32

    init:
      - cmd: set VCARCH=%ARCH%
      - cmd: if %ARCH%==x64 set VCARCH=amd64
      - cmd: if %COMPILER%==VS2017 call "C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Auxiliary\Build\vcvarsall.bat" %VCARCH%
      - cmd: if %COMPILER%==MinGW set CMAKE_GENERATOR="MinGW Makefiles"
      - cmd: if NOT %COMPILER%==MinGW set CMAKE_GENERATOR="NMake Makefiles JOM"
      - cmd: git config --global core.autocrlf input
      - cmd: echo NUMBER_OF_PROCESSORS=%NUMBER_OF_PROCESSORS%
      - cmd: echo PROCESSOR_IDENTIFIER=%PROCESSOR_IDENTIFIER%
      - cmd: echo QTDIR=%QTDIR%
      - cmd: echo OPENSSLDIR=%OPENSSLDIR%
      - cmd: echo CMAKE_GENERATOR=%CMAKE_GENERATOR%

    install:
      - ps: $env:package_version = ("$(git describe --tags --always --long)").trim()
      - ps: Update-AppveyorBuild -Version "$env:package_version-$env:APPVEYOR_BUILD_NUMBER"
      # Install x86 MingW 8.1.0 if it is not available
      - cmd: if %COMPILER%==MinGW if %ARCH%==x86 if not exist "C:\mingw-w64\i686-8.1.0-posix-seh-rt_v6-rev0" md C:\mingw-w64\i686-8.1.0-posix-seh-rt_v6-rev0
      - cmd: if %COMPILER%==MinGW if %ARCH%==x86 cd C:\mingw-w64\i686-8.1.0-posix-seh-rt_v6-rev0
      - cmd: if %COMPILER%==MinGW if %ARCH%==x86 dir
      - cmd: if %COMPILER%==MinGW if %ARCH%==x86 if not exist "mingw32" appveyor-retry appveyor DownloadFile "http://downloads.sourceforge.net/mingw-w64/i686-8.1.0-release-posix-dwarf-rt_v6-rev0.7z" -FileName "mingw32.7z"
      - cmd: if %COMPILER%==MinGW if %ARCH%==x86 if exist "mingw32.7z" 7z x -y "mingw32.7z" > nul

    before_build:
      - cmd: set PATH=%QTDIR%\bin;C:\Qt\Tools\QtCreator\bin;%PATH%
      - cmd: if %COMPILER%==MinGW set PATH=%MINGWDIR%\bin;%PATH:C:\Program Files\Git\usr\bin;=%
      - cmd: echo PATH=%PATH%

    build_script:
      - cmd: cd c:\Build\MMapper
      - cmd: md winbuild
      - cmd: cd winbuild
      - cmd: cmake .. -DCMAKE_BUILD_TYPE=RelWithDebInfo -G %CMAKE_GENERATOR% "-DCMAKE_PREFIX_PATH=%QTDIR%" "-DOPENSSL_ROOT_DIR=%OPENSSLDIR%" -DUSE_COTIRE=true
      - cmd: cmake --build . -j %NUMBER_OF_PROCESSORS%
      - cmd: cpack

    test_script:
      - cmd: ctest -V

    artifacts:
      - path: winbuild\mmapper-*-Windows-$(ARCH).exe
        name: MMapper Installer

      - path: winbuild\mmapper-*-Windows-$(ARCH).*.sha256
        name: MMapper Checksums

  # Mac
  -
    matrix:
      only:
        - image: macos-mojave

    clone_folder: ~/mmapper

    init:
      - sh: echo _NPROCESSORS_ONLN=$(getconf _NPROCESSORS_ONLN)

    install:
      - ps: $env:package_version = ("$(git describe --tags --always --long)").trim()
      - ps: Update-AppveyorBuild -Version "$env:package_version-$env:APPVEYOR_BUILD_NUMBER"
      - brew install qt5 openssl@1.1
      - brew link qt5 --force
      - export PATH=/usr/local/opt/qt5/bin:$PATH

    build_script:
      - mkdir build
      - cd build
      - cmake .. -DCMAKE_PREFIX_PATH=/usr/local/opt/qt5/bin/ -DOPENSSL_ROOT_DIR=/usr/local/opt/openssl\@1.1
      - make -j$(getconf _NPROCESSORS_ONLN)
      - cpack

    test_script:
      - ctest -V

    artifacts:
      - path: build\mmapper-*-Mac.dmg
        name: MMapper Mac Package

      - path: build\mmapper-*-Mac.*.sha256
        name: MMapper Checksums
