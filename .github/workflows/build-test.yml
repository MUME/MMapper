name: Build MMapper

on:
  push:
    branches:
    - master
  pull_request:
  workflow_dispatch:

jobs:
  build:
    runs-on: ${{ matrix.os }}
    continue-on-error: false
    strategy:
      fail-fast: false
      matrix:
        os: [windows-2022, macos-11.0, ubuntu-22.04]
        compiler: ['clang', 'gcc', 'msvc']
        exclude:
        - os: ubuntu-22.04
          compiler: 'msvc'
        - os: macos-11.0
          compiler: 'gcc'
        - os: macos-11.0
          compiler: 'msvc'
        - os: windows-2022
          compiler: 'clang'
        - os: windows-2022
          compiler: 'gcc'
    steps:
    - uses: actions/checkout@v3
      with:
        submodules: true
    - uses: lukka/get-cmake@latest
    - if: matrix.compiler == 'msvc'
      uses: ilammy/msvc-dev-cmd@v1

      #
      # Install Packages (Ubuntu)
      #
    - if: contains( matrix.os, 'ubuntu' )
      name: Install Packages for Ubuntu
      run: |
        sudo apt update -qq
        sudo apt install -y build-essential git qt5-qmake libqt5opengl5-dev zlib1g-dev libssl-dev libminiupnpc-dev
    - if: contains( matrix.os, 'ubuntu' ) && matrix.compiler == 'gcc'
      name: Install GCC for Ubuntu
      run: |
        sudo apt install -y gcc-11 g++-11 lcov
        echo "QMAKESPEC=linux-g++" >> $GITHUB_ENV
        echo "CC=gcc-11" >> $GITHUB_ENV
        echo "CXX=g++-11" >> $GITHUB_ENV
        echo "MMAPPER_CMAKE_EXTRA=-DUSE_UNITY_BUILD=false -DUSE_CODE_COVERAGE=true" >> $GITHUB_ENV
        echo "COVERAGE=true" >> $GITHUB_ENV 
    - if: contains( matrix.os, 'ubuntu' ) && matrix.compiler == 'clang'
      name: Install Clang for Ubuntu
      run: |
        sudo apt install -y clang-13 binutils
        echo "QMAKESPEC=linux-clang" >> $GITHUB_ENV
        echo "CC=clang-13" >> $GITHUB_ENV
        echo "CXX=clang++-13" >> $GITHUB_ENV
        echo "STYLE=true" >> $GITHUB_ENV


      #
      # Install Packages (Mac)
      #
    - if: runner.os == 'macOS'
      name: Install Packages for Mac
      run: |
        brew install qt5 openssl\@1.1 lcov miniupnpc
        brew link qt5 --force
        echo "$(brew --prefix qt5)/bin" >> $GITHUB_PATH
        echo "MMAPPER_CMAKE_EXTRA=-DUSE_UNITY_BUILD=false -DUSE_CODE_COVERAGE=true -DOPENSSL_ROOT_DIR=/usr/local/opt/openssl@1.1" >> $GITHUB_ENV
        echo "COVERAGE=true" >> $GITHUB_ENV 


      #
      # Install Packages (Windows)
      #
    - if: runner.os == 'Windows'
      uses: jurplel/install-qt-action@v3
      with:
        version: 5.15.2
        dir: 'C:\'
        arch: win64_msvc2019_64
        cache: true
        tools: 'tools_openssl_x64'




      #
      # Build
      #
    - if: runner.os == 'Windows' && matrix.compiler == 'msvc'
      name: Build MMapper for Windows
      shell: cmd
      run: |
        mkdir -p build
        cd build
        cmake --version
        cmake -DCMAKE_BUILD_TYPE=Debug -G "NMake Makefiles" -DUSE_UNITY_BUILD=false -DCMAKE_PREFIX_PATH="C:\Qt\5.12.2\msvc2019_64" -DOPENSSL_ROOT_DIR=C:/Qt/Tools/OpenSSL/Win_x64 -S .. || exit -1
        cmake --build . -j %NUMBER_OF_PROCESSORS%
    - if: runner.os == 'Linux' || runner.os == 'macOS'
      name: Build MMapper for Linux and Mac
      run: |
        mkdir -p build
        cd build
        cmake --version
        cmake -DCMAKE_BUILD_TYPE=Debug -G 'Ninja' $MMAPPER_CMAKE_EXTRA -S .. || exit -1
        cmake --build .


      #
      # Run tests
      #
    - if: env.COVERAGE == 'true'
      name: Prepare lcov counters
      run: cd build && lcov --zerocounters --directory .
    - name: Run unit tests
      run: cd build && ctest -V
      env:
        QT_QPA_PLATFORM: offscreen
        ASAN_OPTIONS: detect_leaks=0
    - if: env.COVERAGE == 'true'
      name: Run lcov
      run: |
        cd build
        lcov --directory . --capture --output-file coverage.info
        lcov --list coverage.info
        lcov --remove coverage.info '/usr/*' --output-file filtered.info
        bash <(curl -s https://codecov.io/bash) -f filtered.info || echo "codecov.io did not collect coverage reports" 
    - if: env.STYLE == 'true'
      name: Text Encoding Sanity Check
      run: |
        cd build
        if  [[ -n $(nm -C src/mmapper | grep -w 'QString::\(to\|from\)StdString') ]]; then
          nm -C src/mmapper | grep -w 'QString::\(to\|from\)StdString'
          echo
          echo
          echo "Please avoid using QString::fromStdString() and QString::toStdString()"
          echo
          echo "Both functions assume the user wants utf8, but MMapper almost always expects"
          echo "std::string to have latin1 encoding."
          echo
          echo "Convert any uses to corresponding functions in TextUtils e.g. ::toQStringUtf8()"
          exit -1
        fi


      #
      # Package
      # 
    - name: Package MMapper
      run: cd build && cpack
