name: build-release

on:
  push:
    tags:
    - 'v*'
    branches:
    - master
  pull_request:
  workflow_dispatch:

jobs:
  build:
    runs-on: ${{ matrix.os }}
    continue-on-error: false
    strategy:
      fail-fast: false
      matrix:
        os: [windows-2022, macos-13, macos-14, ubuntu-22.04, ubuntu-22.04-arm]
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
        submodules: true
    - name: Delete beta tag
      shell: bash
      run: |
        if git tag | grep -q '^beta$'; then
          git tag -d beta
        fi
    - name: Get Git tag description
      id: git_info
      run: |
        echo "GIT_TAG=$(git describe --tags --always --long)" >> $GITHUB_ENV
    - if: runner.os == 'Windows'
      uses: lukka/get-cmake@latest
    - if: runner.os == 'Windows'
      uses: ilammy/msvc-dev-cmd@v1

    # Install Dependencies (Ubuntu)
    - if: runner.os == 'Linux'
      name: Install Packages for Ubuntu
      run: |
        sudo apt update -qq
        sudo apt install -y build-essential git qt5-qmake libqt5opengl5-dev libqt5websockets5-dev zlib1g-dev libssl-dev qt5keychain-dev mold gcc-12 g++-12 cmake ninja-build
        echo "QMAKESPEC=linux-g++" >> $GITHUB_ENV
        echo "CC=gcc-12" >> $GITHUB_ENV
        echo "CXX=g++-12" >> $GITHUB_ENV
        echo "MMAPPER_CMAKE_EXTRA=-DUSE_MOLD=true" >> $GITHUB_ENV

    # Install Dependencies (Mac)
    - if: runner.os == 'macOS'
      name: Install Packages for Mac
      run: |
        brew install qt@5 cmake ninja
        brew link qt@5 --force
        echo "$(brew --prefix qt@5)/bin" >> $GITHUB_PATH

    # Install Dependencies (Windows)
    - if: runner.os == 'Windows'
      name: Install Qt for Windows
      uses: jurplel/install-qt-action@v4
      with:
        version: 5.15.2
        dir: 'C:\'
        arch: win64_msvc2019_64
        cache: true
    - if: runner.os == 'Windows'
      name: Install Packages for Windows
      uses: crazy-max/ghaction-chocolatey@v3
      with:
        args: install openssl --version=1.1.1.2100

    # Build
    - if: runner.os == 'Windows'
      name: Build MMapper for Windows
      shell: pwsh
      run: |
        xcopy "C:\Program Files\OpenSSL" "C:\OpenSSL" /E /I /H /K /Y
        mkdir ${{ github.workspace }}/artifact
        mkdir build
        cd build
        cmake --version
        $qtPath = "C:\Qt\5.12.2\msvc2019_64"
        $env:PATH = "$qtPath;$env:PATH"
        $packageDir = ($env:GITHUB_WORKSPACE -replace '\\', '/') + "/artifact"
        cmake -DCMAKE_BUILD_TYPE=RelWithDebInfo -G 'Ninja' -DCPACK_PACKAGE_DIRECTORY="$packageDir" -DCMAKE_PREFIX_PATH=$qtPath -DOPENSSL_ROOT_DIR=C:/OpenSSL/ -DWITH_WEBSOCKET=ON -DWITH_QTKEYCHAIN=ON -S .. || exit -1
        cmake --build . --parallel
    - if: runner.os == 'Linux' || runner.os == 'macOS'
      name: Build MMapper for Linux and Mac
      run: |
        mkdir -p build ${{ github.workspace }}/artifact
        cd build
        cmake --version
        cmake -DCMAKE_BUILD_TYPE=RelWithDebInfo -G 'Ninja' -DCPACK_PACKAGE_DIRECTORY=${{ github.workspace }}/artifact $MMAPPER_CMAKE_EXTRA -DWITH_WEBSOCKET=ON -DWITH_QTKEYCHAIN=ON -S .. || exit -1
        cmake --build . --parallel

    # Package
    - name: Package MMapper
      run: cd build && cpack
    - if: runner.os == 'Linux'
      name: Get Linux package file base name
      id: get_linux_package_name
      run: |
        PACKAGE_FILE=$(ls ${{ github.workspace }}/artifact/*.deb)
        PACKAGE_BASENAME=$(basename "$PACKAGE_FILE" | sed 's/\./-/g')
        echo "PACKAGE_BASENAME=$PACKAGE_BASENAME" >> $GITHUB_OUTPUT
    - if: runner.os == 'macOS'
      name: Get Mac package file base name
      id: get_mac_package_name
      run: |
        PACKAGE_FILE=$(ls ${{ github.workspace }}/artifact/*.dmg)
        PACKAGE_BASENAME=$(basename "$PACKAGE_FILE" | sed 's/\./-/g')
        echo "PACKAGE_BASENAME=$PACKAGE_BASENAME" >> $GITHUB_OUTPUT
    - if: runner.os == 'Windows'
      name: Get Windows package file base name
      id: get_windows_package_name
      shell: pwsh
      run: |
        $packageFile = Get-ChildItem -Path "${{ github.workspace }}/artifact/*.exe" | Select-Object -First 1
        $packageBasename = $packageFile.BaseName -replace '\.', '-'
        "PACKAGE_BASENAME=$packageBasename" >> $env:GITHUB_OUTPUT
    - if: runner.os == 'macOS'
      name: Upload Package for Mac
      uses: actions/upload-artifact@v4
      with:
        name: release-${{ steps.get_mac_package_name.outputs.PACKAGE_BASENAME }}
        path: ${{ github.workspace }}/artifact/*.dmg*
    - if: runner.os == 'Linux'
      name: Upload Package for Ubuntu
      uses: actions/upload-artifact@v4
      with:
        name: release-${{ steps.get_linux_package_name.outputs.PACKAGE_BASENAME }}
        path: ${{ github.workspace }}/artifact/*.deb*
    - if: runner.os == 'Windows'
      name: Upload Package for Windows
      uses: actions/upload-artifact@v4
      with:
        name: release-${{ steps.get_windows_package_name.outputs.PACKAGE_BASENAME }}
        path: ${{ github.workspace }}/artifact/*.exe*
