name: build-appimage

on:
  push:
    tags:
      - 'v*'
    branches:
    - master
  pull_request:
  workflow_dispatch:

jobs:
  build-appimage:
    runs-on: ubuntu-22.04
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
        submodules: true
    - name: Get Git tag description
      id: git_info
      run: |
        echo "GIT_TAG=$(git describe --tags --always --long)" >> $GITHUB_ENV
    - name: Build AppImage using Docker
      run: |
        # Build MMapper within a Docker container using the current working path as a volume
        docker run --rm -v "$(pwd)":/root/mmapper --cap-add SYS_ADMIN --cap-add MKNOD --device /dev/fuse:mrw --security-opt apparmor:unconfined ubuntu:20.04 bash -c 'export DEBIAN_FRONTEND=noninteractive && apt update -qq && apt install -y wget software-properties-common && add-apt-repository ppa:ecal/cmake-3.25 && add-apt-repository ppa:beineri/opt-qt-5.15.4-focal -y && apt update -qq && apt install -y qt515base qt515websockets libgl1-mesa-dev build-essential clang git zlib1g-dev libssl-dev wget zsync fuse cmake libminiupnpc-dev && source /opt/qt*/bin/qt*-env.sh && cd /root/mmapper && mkdir -p build && cd build && git config --global --add safe.directory /root/mmapper && CC=clang CXX=clang++ cmake .. -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/usr -DWITH_WEBSOCKET=ON && make -j$(getconf _NPROCESSORS_ONLN) DESTDIR=appdir install && QT_QPA_PLATFORM=offscreen ctest -V --no-compress-output -T test && export VERSION=$(grep -i "SET(CPACK_PACKAGE_VERSION " CPackConfig.cmake | cut -d\" -f 2) && wget https://github.com/probonopd/linuxdeployqt/releases/download/continuous/linuxdeployqt-continuous-x86_64.AppImage && chmod a+x linuxdeployqt-continuous-x86_64.AppImage && ./linuxdeployqt-continuous-x86_64.AppImage appdir/usr/share/applications/org.mume.MMapper.desktop -updateinformation="gh-releases-zsync|MUME|MMapper|latest|MMapper-*-x86_64.AppImage.zsync" -appimage'
    - name: Generate SHA256 checksum for AppImage
      run: |
        sudo chown -R $USER:$USER build/
        mv build/*.AppImage* .
        export FILE=$(find . -type f -name MMapper*.AppImage | sed 's#./##')
        sha256sum $FILE > $FILE.sha256
        mkdir ${{ github.workspace }}/artifact
        mv *.AppImage* ${{ github.workspace }}/artifact
    - name: Upload AppImage
      uses: actions/upload-artifact@v4
      with:
        name: release-build AppImage ${{ env.GIT_TAG }}
        path: ${{ github.workspace }}/artifact/*.AppImage*
