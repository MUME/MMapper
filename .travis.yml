language: cpp

dist: bionic

# https://docs.travis-ci.com/user/languages/cpp/
matrix:
  include:
    #
    # Clang Format
    #
    - os: linux
      name: Code Style
      dist: focal
      addons:
        apt:
          packages:
            - clang-format-10
      env:
        - CODESTYLE=1
        - CLANG_FORMAT=clang-format-10
    #
    # Snapcraft
    #
    - os: linux
      name: Snapcraft
      addons:
        snaps:
          - name: snapcraft
            channel: edge
            classic: true
        apt:
          sources:
            - qttools5-dev-tools
      env:
        - SNAPCRAFT=1
    #
    # Mac
    #
    - os: osx
      name: Mac Brew
      osx_image: xcode11.2
      compiler: clang
      addons:
        homebrew:
          packages:
            - cmake
            - qt5
            - miniupnpc
            - lcov
            - openssl@1.1
      env:
        - BUILD=1
        - CODECOV=1
    #
    # Debian Buster armhf
    #
    - os: linux
      name: Debian Buster armhf
      arch: arm64
      services:
        - docker
      env:
        - DOCKER=1
        - TARGET_ARCHITECTURE=armhf
        - DOCKER_IMAGE=multiarch/debian-debootstrap:armhf-buster
    #
    # Debian Buster i386
    #
    - os: linux
      name: Debian Buster i386
      arch: amd64
      services:
        - docker
      env:
        - DOCKER=1
        - TARGET_ARCHITECTURE=i386
        - DOCKER_IMAGE=multiarch/debian-debootstrap:i386-buster
    #
    # Linux Clang 6 (Ubuntu 18.04)
    #
    - os: linux
      name: Linux Clang 6
      compiler: clang
      addons:
        apt:
          packages:
            - clang
            - cmake
            - libminiupnpc-dev
            - lcov
            - libqt5opengl5-dev
            - qt5-default
            - mesa-common-dev
            - binutils
      env:
        - MATRIX_EVAL="CC=clang-6.0 && CXX=clang++-6.0"
        - BUILD=1
        - CODECOV=1
    #
    # Linux Clang 10 (Ubuntu 20.04)
    #
    - os: linux
      name: Linux Clang 10
      dist: focal
      compiler: clang
      addons:
        apt:
          packages:
            - clang-10
            - cmake
            - libminiupnpc-dev
            - lcov
            - libqt5opengl5-dev
            - qt5-default
            - mesa-common-dev
            - binutils
      env:
        - MATRIX_EVAL="CC=clang-10 && CXX=clang++-10"
        - BUILD=1
        - CODECOV=1
    #
    # Linux GCC 7 (Ubuntu 18.04)
    #
    - os: linux
      name: Linux GCC 7
      compiler: gcc
      addons:
        apt:
          packages:
            - g++-7
            - cmake
            - libminiupnpc-dev
            - lcov
            - libqt5opengl5-dev
            - qt5-default
            - mesa-common-dev
            - binutils
      env:
        - MATRIX_EVAL="CC=gcc-7 && CXX=g++-7"
        - BUILD=1
        - CODECOV=1
    #
    # Linux GCC 8 (Debian Buster)
    #
    - os: linux
      name: Linux GCC 8
      compiler: gcc
      addons:
        apt:
          packages:
            - g++-8
            - cmake
            - libminiupnpc-dev
            - lcov
            - libqt5opengl5-dev
            - qt5-default
            - mesa-common-dev
            - binutils
      env:
        - MATRIX_EVAL="CC=gcc-8 && CXX=g++-8"
        - BUILD=1
        - CODECOV=1
    #
    # Linux GCC 9 (Ubuntu 20.04)
    #
    - os: linux
      name: Linux GCC 9
      dist: focal
      compiler: gcc
      addons:
        apt:
          packages:
            - g++-9
            - cmake
            - libminiupnpc-dev
            - lcov
            - libqt5opengl5-dev
            - qt5-default
            - mesa-common-dev
            - binutils
      env:
        - MATRIX_EVAL="CC=gcc-9 && CXX=g++-9"
        - BUILD=1
        - CODECOV=1

before_install:
  - '[[ "$MATRIX_EVAL" == "" ]] || eval "${MATRIX_EVAL}"'

install:
  - |
    if [ "$TRAVIS_OS_NAME" == "osx" ]; then
      brew link --force qt5
      export PATH=/usr/local/opt/qt5/bin:$PATH
    fi
  - '[[ "$TRAVIS_CPU_ARCH" != "amd64" ]] || [[ "$DOCKER" == "" ]] || docker run --rm --privileged multiarch/qemu-user-static:register --reset'

before_script:
  - |
    if [ "$TRAVIS_OS_NAME" == "linux" ]; then
      [[ "$CXX" != "clang++" ]] || export QMAKESPEC=linux-clang
      [[ "$CXX" != "g++" ]] || export QMAKESPEC=linux-g++
      [[ "$QT" == "" ]] || . /opt/qt$QT/bin/qt$QT-env.sh
      export QT_SELECT=qt5
      export MMAPPER_CMAKE_EXTRA=-DUSE_COTIRE=true
    fi
  - |
    if [ "$TRAVIS_OS_NAME" == "osx" ]; then
      [[ "$CXX" != "clang++" ]] || export QMAKESPEC=macx-clang
      [[ "$CXX" != "g++" ]] || export QMAKESPEC=macx-g++
      export MMAPPER_CMAKE_EXTRA=-DOPENSSL_ROOT_DIR=/usr/local/opt/openssl\@1.1
    fi
  - |
    if [ "$CODESTYLE" != "" ]; then
      $CLANG_FORMAT -version
      find . -iname *.h -o -iname *.c -o -iname *.cpp -o -iname *.hpp | xargs -n 1 -P $(getconf _NPROCESSORS_ONLN) $CLANG_FORMAT -style=file -i -fallback-style=none
      if  [[ -n $(git diff) ]]; then
        echo
        git diff
        echo
        echo "Please fix your code style:"
        echo "find . -iname *.h -o -iname *.c -o -iname *.cpp -o -iname *.hpp | xargs -n 1 -P \$(getconf _NPROCESSORS_ONLN) clang-format -style=file -i -fallback-style=none"
        exit -1
      fi
    fi
  - '[[ "$CODECOV" == "" ]] || export MMAPPER_CMAKE_EXTRA="$MMAPPER_CMAKE_EXTRA -DUSE_CODE_COVERAGE=true"'
  - |
    if [ "$BUILD" != "" ]; then
      mkdir build
      cd build
      cmake --version
      cmake .. -DCMAKE_BUILD_TYPE=Debug $MMAPPER_CMAKE_EXTRA || exit -1
    fi

script:
  - |
    if [ "$BUILD" != "" ]; then
      make -j$(getconf _NPROCESSORS_ONLN) || exit -1
    fi
  - '[[ "$SNAPCRAFT" == "" ]] || snapcraft snap --destructive-mode'
  - |
    if [ "$DOCKER" != "" ]; then
      docker run --rm -v "$(pwd)":/root/mmapper $DOCKER_IMAGE bash -c "apt update && apt upgrade -y && apt install -y build-essential git qt5-qmake libqt5opengl5-dev zlib1g-dev libssl-dev cmake libminiupnpc-dev && cd /root/mmapper && mkdir build && cd build && cmake .. -DTARGET_ARCHITECTURE=$TARGET_ARCHITECTURE -DCMAKE_BUILD_TYPE=Debug -DUSE_COTIRE=true && make -j$(getconf _NPROCESSORS_ONLN) && QT_QPA_PLATFORM=offscreen ctest -V && cpack"
    fi

after_success:
  - '[[ "$CODECOV" == "" ]] || lcov  --zerocounters  --directory .'
  - |
    if [[ "$BUILD" != "" ]]; then
      export QT_QPA_PLATFORM=offscreen
      ctest -V || exit -1
      if  [[ -n $(nm -C src/mmapper | grep -w 'QString::\(to\|from\)StdString') ]]; then
        nm -C src/mmapper | grep -w 'QString::\(to\|from\)StdString'
        echo
        echo
        echo "Please avoid using QString::fromStdString() and QString::toStdString()"
        echo
        echo "Both functions assume the user wants utf8, but MMapper almost always expects"
        echo "std::string to have latin1 encoding."
        echo
        echo "Convert any uses to corresponding functions in TextUtils e.g. ::toQStringUtf8()"
        exit -1
      fi
    fi
  - |
    if [ "$CODECOV" != "" ]; then
      lcov --remove coverage.info '/usr/*' "${HOME}"'/.cache/*' --output-file coverage.info
      lcov --directory . --capture --output-file coverage.info
      lcov --list coverage.info
      bash <(curl -s https://codecov.io/bash) -f coverage.info || echo "Codecov did not collect coverage reports"
    fi
  - '[[ "$BUILD" == "" ]] || cpack'

